<?php
/**
 * WebhookObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendX REST API
 *
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendx\model;

use \ArrayAccess;
use \sendx\ObjectSerializer;

/**
 * WebhookObject Class Doc Comment
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WebhookObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'int',
        'time' => 'int',
        'data' => 'string',
        'provider_message_id' => 'string',
        'campaign_id' => 'string',
        'drip_step_id' => 'string',
        'rss_exec_id' => 'string',
        'tag_id' => 'string',
        'link' => 'string',
        'list_id' => 'string',
        'contact_id' => 'string',
        'custom_field_id' => 'string',
        'template_id' => 'string',
        'popup_id' => 'string',
        'landing_page_id' => 'string',
        'form_id' => 'string',
        'segment_id' => 'string',
        'automation_id' => 'string',
        'drip_id' => 'string',
        'rss_id' => 'string',
        'ab_test_id' => 'string',
        'workflow_id' => 'string',
        'workflow_node_id' => 'string',
        'workflow_email_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => 'int64',
        'time' => 'int64',
        'data' => null,
        'provider_message_id' => null,
        'campaign_id' => null,
        'drip_step_id' => null,
        'rss_exec_id' => null,
        'tag_id' => null,
        'link' => null,
        'list_id' => null,
        'contact_id' => null,
        'custom_field_id' => null,
        'template_id' => null,
        'popup_id' => null,
        'landing_page_id' => null,
        'form_id' => null,
        'segment_id' => null,
        'automation_id' => null,
        'drip_id' => null,
        'rss_id' => null,
        'ab_test_id' => null,
        'workflow_id' => null,
        'workflow_node_id' => null,
        'workflow_email_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'time' => false,
        'data' => false,
        'provider_message_id' => false,
        'campaign_id' => false,
        'drip_step_id' => false,
        'rss_exec_id' => false,
        'tag_id' => false,
        'link' => false,
        'list_id' => false,
        'contact_id' => false,
        'custom_field_id' => false,
        'template_id' => false,
        'popup_id' => false,
        'landing_page_id' => false,
        'form_id' => false,
        'segment_id' => false,
        'automation_id' => false,
        'drip_id' => false,
        'rss_id' => false,
        'ab_test_id' => false,
        'workflow_id' => false,
        'workflow_node_id' => false,
        'workflow_email_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'time' => 'time',
        'data' => 'data',
        'provider_message_id' => 'provider_message_id',
        'campaign_id' => 'campaign_id',
        'drip_step_id' => 'drip_step_id',
        'rss_exec_id' => 'rss_exec_id',
        'tag_id' => 'tag_id',
        'link' => 'link',
        'list_id' => 'list_id',
        'contact_id' => 'contact_id',
        'custom_field_id' => 'custom_field_id',
        'template_id' => 'template_id',
        'popup_id' => 'popup_id',
        'landing_page_id' => 'landing_page_id',
        'form_id' => 'form_id',
        'segment_id' => 'segment_id',
        'automation_id' => 'automation_id',
        'drip_id' => 'drip_id',
        'rss_id' => 'rss_id',
        'ab_test_id' => 'ab_test_id',
        'workflow_id' => 'workflow_id',
        'workflow_node_id' => 'workflow_node_id',
        'workflow_email_id' => 'workflow_email_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'time' => 'setTime',
        'data' => 'setData',
        'provider_message_id' => 'setProviderMessageId',
        'campaign_id' => 'setCampaignId',
        'drip_step_id' => 'setDripStepId',
        'rss_exec_id' => 'setRssExecId',
        'tag_id' => 'setTagId',
        'link' => 'setLink',
        'list_id' => 'setListId',
        'contact_id' => 'setContactId',
        'custom_field_id' => 'setCustomFieldId',
        'template_id' => 'setTemplateId',
        'popup_id' => 'setPopupId',
        'landing_page_id' => 'setLandingPageId',
        'form_id' => 'setFormId',
        'segment_id' => 'setSegmentId',
        'automation_id' => 'setAutomationId',
        'drip_id' => 'setDripId',
        'rss_id' => 'setRssId',
        'ab_test_id' => 'setAbTestId',
        'workflow_id' => 'setWorkflowId',
        'workflow_node_id' => 'setWorkflowNodeId',
        'workflow_email_id' => 'setWorkflowEmailId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'time' => 'getTime',
        'data' => 'getData',
        'provider_message_id' => 'getProviderMessageId',
        'campaign_id' => 'getCampaignId',
        'drip_step_id' => 'getDripStepId',
        'rss_exec_id' => 'getRssExecId',
        'tag_id' => 'getTagId',
        'link' => 'getLink',
        'list_id' => 'getListId',
        'contact_id' => 'getContactId',
        'custom_field_id' => 'getCustomFieldId',
        'template_id' => 'getTemplateId',
        'popup_id' => 'getPopupId',
        'landing_page_id' => 'getLandingPageId',
        'form_id' => 'getFormId',
        'segment_id' => 'getSegmentId',
        'automation_id' => 'getAutomationId',
        'drip_id' => 'getDripId',
        'rss_id' => 'getRssId',
        'ab_test_id' => 'getAbTestId',
        'workflow_id' => 'getWorkflowId',
        'workflow_node_id' => 'getWorkflowNodeId',
        'workflow_email_id' => 'getWorkflowEmailId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('provider_message_id', $data ?? [], null);
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('drip_step_id', $data ?? [], null);
        $this->setIfExists('rss_exec_id', $data ?? [], null);
        $this->setIfExists('tag_id', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('list_id', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('custom_field_id', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('popup_id', $data ?? [], null);
        $this->setIfExists('landing_page_id', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('segment_id', $data ?? [], null);
        $this->setIfExists('automation_id', $data ?? [], null);
        $this->setIfExists('drip_id', $data ?? [], null);
        $this->setIfExists('rss_id', $data ?? [], null);
        $this->setIfExists('ab_test_id', $data ?? [], null);
        $this->setIfExists('workflow_id', $data ?? [], null);
        $this->setIfExists('workflow_node_id', $data ?? [], null);
        $this->setIfExists('workflow_email_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type The type of the event.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int|null $time The timestamp of the event in milliseconds since the epoch.
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data Arbitrary data associated with the event.
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets provider_message_id
     *
     * @return string|null
     */
    public function getProviderMessageId()
    {
        return $this->container['provider_message_id'];
    }

    /**
     * Sets provider_message_id
     *
     * @param string|null $provider_message_id Optional provider message ID.
     *
     * @return self
     */
    public function setProviderMessageId($provider_message_id)
    {
        if (is_null($provider_message_id)) {
            throw new \InvalidArgumentException('non-nullable provider_message_id cannot be null');
        }
        $this->container['provider_message_id'] = $provider_message_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id Optional campaign ID.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets drip_step_id
     *
     * @return string|null
     */
    public function getDripStepId()
    {
        return $this->container['drip_step_id'];
    }

    /**
     * Sets drip_step_id
     *
     * @param string|null $drip_step_id Optional drip step ID.
     *
     * @return self
     */
    public function setDripStepId($drip_step_id)
    {
        if (is_null($drip_step_id)) {
            throw new \InvalidArgumentException('non-nullable drip_step_id cannot be null');
        }
        $this->container['drip_step_id'] = $drip_step_id;

        return $this;
    }

    /**
     * Gets rss_exec_id
     *
     * @return string|null
     */
    public function getRssExecId()
    {
        return $this->container['rss_exec_id'];
    }

    /**
     * Sets rss_exec_id
     *
     * @param string|null $rss_exec_id Optional RSS execution ID.
     *
     * @return self
     */
    public function setRssExecId($rss_exec_id)
    {
        if (is_null($rss_exec_id)) {
            throw new \InvalidArgumentException('non-nullable rss_exec_id cannot be null');
        }
        $this->container['rss_exec_id'] = $rss_exec_id;

        return $this;
    }

    /**
     * Gets tag_id
     *
     * @return string|null
     */
    public function getTagId()
    {
        return $this->container['tag_id'];
    }

    /**
     * Sets tag_id
     *
     * @param string|null $tag_id Optional tag ID.
     *
     * @return self
     */
    public function setTagId($tag_id)
    {
        if (is_null($tag_id)) {
            throw new \InvalidArgumentException('non-nullable tag_id cannot be null');
        }
        $this->container['tag_id'] = $tag_id;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link Optional link associated with the event.
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets list_id
     *
     * @return string|null
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     *
     * @param string|null $list_id Optional list ID.
     *
     * @return self
     */
    public function setListId($list_id)
    {
        if (is_null($list_id)) {
            throw new \InvalidArgumentException('non-nullable list_id cannot be null');
        }
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id Optional contact ID.
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            throw new \InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets custom_field_id
     *
     * @return string|null
     */
    public function getCustomFieldId()
    {
        return $this->container['custom_field_id'];
    }

    /**
     * Sets custom_field_id
     *
     * @param string|null $custom_field_id Optional custom field ID.
     *
     * @return self
     */
    public function setCustomFieldId($custom_field_id)
    {
        if (is_null($custom_field_id)) {
            throw new \InvalidArgumentException('non-nullable custom_field_id cannot be null');
        }
        $this->container['custom_field_id'] = $custom_field_id;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string|null $template_id Optional template ID.
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            throw new \InvalidArgumentException('non-nullable template_id cannot be null');
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets popup_id
     *
     * @return string|null
     */
    public function getPopupId()
    {
        return $this->container['popup_id'];
    }

    /**
     * Sets popup_id
     *
     * @param string|null $popup_id Optional popup ID.
     *
     * @return self
     */
    public function setPopupId($popup_id)
    {
        if (is_null($popup_id)) {
            throw new \InvalidArgumentException('non-nullable popup_id cannot be null');
        }
        $this->container['popup_id'] = $popup_id;

        return $this;
    }

    /**
     * Gets landing_page_id
     *
     * @return string|null
     */
    public function getLandingPageId()
    {
        return $this->container['landing_page_id'];
    }

    /**
     * Sets landing_page_id
     *
     * @param string|null $landing_page_id Optional landing page ID.
     *
     * @return self
     */
    public function setLandingPageId($landing_page_id)
    {
        if (is_null($landing_page_id)) {
            throw new \InvalidArgumentException('non-nullable landing_page_id cannot be null');
        }
        $this->container['landing_page_id'] = $landing_page_id;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return string|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param string|null $form_id Optional form ID.
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        if (is_null($form_id)) {
            throw new \InvalidArgumentException('non-nullable form_id cannot be null');
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets segment_id
     *
     * @return string|null
     */
    public function getSegmentId()
    {
        return $this->container['segment_id'];
    }

    /**
     * Sets segment_id
     *
     * @param string|null $segment_id Optional segment ID.
     *
     * @return self
     */
    public function setSegmentId($segment_id)
    {
        if (is_null($segment_id)) {
            throw new \InvalidArgumentException('non-nullable segment_id cannot be null');
        }
        $this->container['segment_id'] = $segment_id;

        return $this;
    }

    /**
     * Gets automation_id
     *
     * @return string|null
     */
    public function getAutomationId()
    {
        return $this->container['automation_id'];
    }

    /**
     * Sets automation_id
     *
     * @param string|null $automation_id Optional automation ID.
     *
     * @return self
     */
    public function setAutomationId($automation_id)
    {
        if (is_null($automation_id)) {
            throw new \InvalidArgumentException('non-nullable automation_id cannot be null');
        }
        $this->container['automation_id'] = $automation_id;

        return $this;
    }

    /**
     * Gets drip_id
     *
     * @return string|null
     */
    public function getDripId()
    {
        return $this->container['drip_id'];
    }

    /**
     * Sets drip_id
     *
     * @param string|null $drip_id Optional drip ID.
     *
     * @return self
     */
    public function setDripId($drip_id)
    {
        if (is_null($drip_id)) {
            throw new \InvalidArgumentException('non-nullable drip_id cannot be null');
        }
        $this->container['drip_id'] = $drip_id;

        return $this;
    }

    /**
     * Gets rss_id
     *
     * @return string|null
     */
    public function getRssId()
    {
        return $this->container['rss_id'];
    }

    /**
     * Sets rss_id
     *
     * @param string|null $rss_id Optional RSS ID.
     *
     * @return self
     */
    public function setRssId($rss_id)
    {
        if (is_null($rss_id)) {
            throw new \InvalidArgumentException('non-nullable rss_id cannot be null');
        }
        $this->container['rss_id'] = $rss_id;

        return $this;
    }

    /**
     * Gets ab_test_id
     *
     * @return string|null
     */
    public function getAbTestId()
    {
        return $this->container['ab_test_id'];
    }

    /**
     * Sets ab_test_id
     *
     * @param string|null $ab_test_id Optional A/B test ID.
     *
     * @return self
     */
    public function setAbTestId($ab_test_id)
    {
        if (is_null($ab_test_id)) {
            throw new \InvalidArgumentException('non-nullable ab_test_id cannot be null');
        }
        $this->container['ab_test_id'] = $ab_test_id;

        return $this;
    }

    /**
     * Gets workflow_id
     *
     * @return string|null
     */
    public function getWorkflowId()
    {
        return $this->container['workflow_id'];
    }

    /**
     * Sets workflow_id
     *
     * @param string|null $workflow_id Optional workflow ID.
     *
     * @return self
     */
    public function setWorkflowId($workflow_id)
    {
        if (is_null($workflow_id)) {
            throw new \InvalidArgumentException('non-nullable workflow_id cannot be null');
        }
        $this->container['workflow_id'] = $workflow_id;

        return $this;
    }

    /**
     * Gets workflow_node_id
     *
     * @return string|null
     */
    public function getWorkflowNodeId()
    {
        return $this->container['workflow_node_id'];
    }

    /**
     * Sets workflow_node_id
     *
     * @param string|null $workflow_node_id Optional workflow node ID.
     *
     * @return self
     */
    public function setWorkflowNodeId($workflow_node_id)
    {
        if (is_null($workflow_node_id)) {
            throw new \InvalidArgumentException('non-nullable workflow_node_id cannot be null');
        }
        $this->container['workflow_node_id'] = $workflow_node_id;

        return $this;
    }

    /**
     * Gets workflow_email_id
     *
     * @return string|null
     */
    public function getWorkflowEmailId()
    {
        return $this->container['workflow_email_id'];
    }

    /**
     * Sets workflow_email_id
     *
     * @param string|null $workflow_email_id Optional workflow email ID.
     *
     * @return self
     */
    public function setWorkflowEmailId($workflow_email_id)
    {
        if (is_null($workflow_email_id)) {
            throw new \InvalidArgumentException('non-nullable workflow_email_id cannot be null');
        }
        $this->container['workflow_email_id'] = $workflow_email_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


