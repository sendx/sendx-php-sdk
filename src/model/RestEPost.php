<?php
/**
 * RestEPost
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendX REST API
 *
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendx\model;

use \ArrayAccess;
use \sendx\ObjectSerializer;

/**
 * RestEPost Class Doc Comment
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestEPost implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RestEPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'post_title' => 'string',
        'post_description' => 'string',
        'post_category' => 'string',
        'member' => 'string',
        'post_thumbnail' => 'string',
        'post_html' => 'string',
        'post_template' => 'string',
        'is_published' => 'bool',
        'included_tags' => 'string[]',
        'editor_type' => 'int',
        'post_slug' => 'string',
        'status' => 'int',
        'page_title' => 'string',
        'page_description' => 'string',
        'page_keywords' => 'string',
        'social_title' => 'string',
        'social_description' => 'string',
        'social_image_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'post_title' => null,
        'post_description' => null,
        'post_category' => null,
        'member' => null,
        'post_thumbnail' => 'uri',
        'post_html' => null,
        'post_template' => null,
        'is_published' => null,
        'included_tags' => null,
        'editor_type' => null,
        'post_slug' => null,
        'status' => null,
        'page_title' => null,
        'page_description' => null,
        'page_keywords' => null,
        'social_title' => null,
        'social_description' => null,
        'social_image_url' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'post_title' => false,
        'post_description' => false,
        'post_category' => false,
        'member' => false,
        'post_thumbnail' => false,
        'post_html' => false,
        'post_template' => false,
        'is_published' => false,
        'included_tags' => false,
        'editor_type' => false,
        'post_slug' => false,
        'status' => false,
        'page_title' => false,
        'page_description' => false,
        'page_keywords' => false,
        'social_title' => false,
        'social_description' => false,
        'social_image_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'post_title' => 'postTitle',
        'post_description' => 'postDescription',
        'post_category' => 'postCategory',
        'member' => 'member',
        'post_thumbnail' => 'postThumbnail',
        'post_html' => 'postHtml',
        'post_template' => 'postTemplate',
        'is_published' => 'isPublished',
        'included_tags' => 'includedTags',
        'editor_type' => 'editorType',
        'post_slug' => 'postSlug',
        'status' => 'status',
        'page_title' => 'pageTitle',
        'page_description' => 'pageDescription',
        'page_keywords' => 'pageKeywords',
        'social_title' => 'socialTitle',
        'social_description' => 'socialDescription',
        'social_image_url' => 'socialImageUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'post_title' => 'setPostTitle',
        'post_description' => 'setPostDescription',
        'post_category' => 'setPostCategory',
        'member' => 'setMember',
        'post_thumbnail' => 'setPostThumbnail',
        'post_html' => 'setPostHtml',
        'post_template' => 'setPostTemplate',
        'is_published' => 'setIsPublished',
        'included_tags' => 'setIncludedTags',
        'editor_type' => 'setEditorType',
        'post_slug' => 'setPostSlug',
        'status' => 'setStatus',
        'page_title' => 'setPageTitle',
        'page_description' => 'setPageDescription',
        'page_keywords' => 'setPageKeywords',
        'social_title' => 'setSocialTitle',
        'social_description' => 'setSocialDescription',
        'social_image_url' => 'setSocialImageUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'post_title' => 'getPostTitle',
        'post_description' => 'getPostDescription',
        'post_category' => 'getPostCategory',
        'member' => 'getMember',
        'post_thumbnail' => 'getPostThumbnail',
        'post_html' => 'getPostHtml',
        'post_template' => 'getPostTemplate',
        'is_published' => 'getIsPublished',
        'included_tags' => 'getIncludedTags',
        'editor_type' => 'getEditorType',
        'post_slug' => 'getPostSlug',
        'status' => 'getStatus',
        'page_title' => 'getPageTitle',
        'page_description' => 'getPageDescription',
        'page_keywords' => 'getPageKeywords',
        'social_title' => 'getSocialTitle',
        'social_description' => 'getSocialDescription',
        'social_image_url' => 'getSocialImageUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('post_title', $data ?? [], null);
        $this->setIfExists('post_description', $data ?? [], null);
        $this->setIfExists('post_category', $data ?? [], null);
        $this->setIfExists('member', $data ?? [], null);
        $this->setIfExists('post_thumbnail', $data ?? [], null);
        $this->setIfExists('post_html', $data ?? [], null);
        $this->setIfExists('post_template', $data ?? [], null);
        $this->setIfExists('is_published', $data ?? [], false);
        $this->setIfExists('included_tags', $data ?? [], null);
        $this->setIfExists('editor_type', $data ?? [], 1);
        $this->setIfExists('post_slug', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 1);
        $this->setIfExists('page_title', $data ?? [], null);
        $this->setIfExists('page_description', $data ?? [], null);
        $this->setIfExists('page_keywords', $data ?? [], null);
        $this->setIfExists('social_title', $data ?? [], null);
        $this->setIfExists('social_description', $data ?? [], null);
        $this->setIfExists('social_image_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['post_title'] === null) {
            $invalidProperties[] = "'post_title' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Internal post name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets post_title
     *
     * @return string
     */
    public function getPostTitle()
    {
        return $this->container['post_title'];
    }

    /**
     * Sets post_title
     *
     * @param string $post_title Public post title
     *
     * @return self
     */
    public function setPostTitle($post_title)
    {
        if (is_null($post_title)) {
            throw new \InvalidArgumentException('non-nullable post_title cannot be null');
        }
        $this->container['post_title'] = $post_title;

        return $this;
    }

    /**
     * Gets post_description
     *
     * @return string|null
     */
    public function getPostDescription()
    {
        return $this->container['post_description'];
    }

    /**
     * Sets post_description
     *
     * @param string|null $post_description Post excerpt/description
     *
     * @return self
     */
    public function setPostDescription($post_description)
    {
        if (is_null($post_description)) {
            throw new \InvalidArgumentException('non-nullable post_description cannot be null');
        }
        $this->container['post_description'] = $post_description;

        return $this;
    }

    /**
     * Gets post_category
     *
     * @return string|null
     */
    public function getPostCategory()
    {
        return $this->container['post_category'];
    }

    /**
     * Sets post_category
     *
     * @param string|null $post_category Category ID (with or without prefix)
     *
     * @return self
     */
    public function setPostCategory($post_category)
    {
        if (is_null($post_category)) {
            throw new \InvalidArgumentException('non-nullable post_category cannot be null');
        }
        $this->container['post_category'] = $post_category;

        return $this;
    }

    /**
     * Gets member
     *
     * @return string|null
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param string|null $member Author member ID
     *
     * @return self
     */
    public function setMember($member)
    {
        if (is_null($member)) {
            throw new \InvalidArgumentException('non-nullable member cannot be null');
        }
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets post_thumbnail
     *
     * @return string|null
     */
    public function getPostThumbnail()
    {
        return $this->container['post_thumbnail'];
    }

    /**
     * Sets post_thumbnail
     *
     * @param string|null $post_thumbnail Thumbnail image URL
     *
     * @return self
     */
    public function setPostThumbnail($post_thumbnail)
    {
        if (is_null($post_thumbnail)) {
            throw new \InvalidArgumentException('non-nullable post_thumbnail cannot be null');
        }
        $this->container['post_thumbnail'] = $post_thumbnail;

        return $this;
    }

    /**
     * Gets post_html
     *
     * @return string|null
     */
    public function getPostHtml()
    {
        return $this->container['post_html'];
    }

    /**
     * Sets post_html
     *
     * @param string|null $post_html Post HTML content
     *
     * @return self
     */
    public function setPostHtml($post_html)
    {
        if (is_null($post_html)) {
            throw new \InvalidArgumentException('non-nullable post_html cannot be null');
        }
        $this->container['post_html'] = $post_html;

        return $this;
    }

    /**
     * Gets post_template
     *
     * @return string|null
     */
    public function getPostTemplate()
    {
        return $this->container['post_template'];
    }

    /**
     * Sets post_template
     *
     * @param string|null $post_template Post template
     *
     * @return self
     */
    public function setPostTemplate($post_template)
    {
        if (is_null($post_template)) {
            throw new \InvalidArgumentException('non-nullable post_template cannot be null');
        }
        $this->container['post_template'] = $post_template;

        return $this;
    }

    /**
     * Gets is_published
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['is_published'];
    }

    /**
     * Sets is_published
     *
     * @param bool|null $is_published Publication status
     *
     * @return self
     */
    public function setIsPublished($is_published)
    {
        if (is_null($is_published)) {
            throw new \InvalidArgumentException('non-nullable is_published cannot be null');
        }
        $this->container['is_published'] = $is_published;

        return $this;
    }

    /**
     * Gets included_tags
     *
     * @return string[]|null
     */
    public function getIncludedTags()
    {
        return $this->container['included_tags'];
    }

    /**
     * Sets included_tags
     *
     * @param string[]|null $included_tags Post tag IDs
     *
     * @return self
     */
    public function setIncludedTags($included_tags)
    {
        if (is_null($included_tags)) {
            throw new \InvalidArgumentException('non-nullable included_tags cannot be null');
        }
        $this->container['included_tags'] = $included_tags;

        return $this;
    }

    /**
     * Gets editor_type
     *
     * @return int|null
     */
    public function getEditorType()
    {
        return $this->container['editor_type'];
    }

    /**
     * Sets editor_type
     *
     * @param int|null $editor_type Editor type used
     *
     * @return self
     */
    public function setEditorType($editor_type)
    {
        if (is_null($editor_type)) {
            throw new \InvalidArgumentException('non-nullable editor_type cannot be null');
        }
        $this->container['editor_type'] = $editor_type;

        return $this;
    }

    /**
     * Gets post_slug
     *
     * @return string|null
     */
    public function getPostSlug()
    {
        return $this->container['post_slug'];
    }

    /**
     * Sets post_slug
     *
     * @param string|null $post_slug URL slug
     *
     * @return self
     */
    public function setPostSlug($post_slug)
    {
        if (is_null($post_slug)) {
            throw new \InvalidArgumentException('non-nullable post_slug cannot be null');
        }
        $this->container['post_slug'] = $post_slug;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Post status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets page_title
     *
     * @return string|null
     */
    public function getPageTitle()
    {
        return $this->container['page_title'];
    }

    /**
     * Sets page_title
     *
     * @param string|null $page_title SEO page title
     *
     * @return self
     */
    public function setPageTitle($page_title)
    {
        if (is_null($page_title)) {
            throw new \InvalidArgumentException('non-nullable page_title cannot be null');
        }
        $this->container['page_title'] = $page_title;

        return $this;
    }

    /**
     * Gets page_description
     *
     * @return string|null
     */
    public function getPageDescription()
    {
        return $this->container['page_description'];
    }

    /**
     * Sets page_description
     *
     * @param string|null $page_description SEO meta description
     *
     * @return self
     */
    public function setPageDescription($page_description)
    {
        if (is_null($page_description)) {
            throw new \InvalidArgumentException('non-nullable page_description cannot be null');
        }
        $this->container['page_description'] = $page_description;

        return $this;
    }

    /**
     * Gets page_keywords
     *
     * @return string|null
     */
    public function getPageKeywords()
    {
        return $this->container['page_keywords'];
    }

    /**
     * Sets page_keywords
     *
     * @param string|null $page_keywords SEO keywords
     *
     * @return self
     */
    public function setPageKeywords($page_keywords)
    {
        if (is_null($page_keywords)) {
            throw new \InvalidArgumentException('non-nullable page_keywords cannot be null');
        }
        $this->container['page_keywords'] = $page_keywords;

        return $this;
    }

    /**
     * Gets social_title
     *
     * @return string|null
     */
    public function getSocialTitle()
    {
        return $this->container['social_title'];
    }

    /**
     * Sets social_title
     *
     * @param string|null $social_title Social media title
     *
     * @return self
     */
    public function setSocialTitle($social_title)
    {
        if (is_null($social_title)) {
            throw new \InvalidArgumentException('non-nullable social_title cannot be null');
        }
        $this->container['social_title'] = $social_title;

        return $this;
    }

    /**
     * Gets social_description
     *
     * @return string|null
     */
    public function getSocialDescription()
    {
        return $this->container['social_description'];
    }

    /**
     * Sets social_description
     *
     * @param string|null $social_description Social media description
     *
     * @return self
     */
    public function setSocialDescription($social_description)
    {
        if (is_null($social_description)) {
            throw new \InvalidArgumentException('non-nullable social_description cannot be null');
        }
        $this->container['social_description'] = $social_description;

        return $this;
    }

    /**
     * Gets social_image_url
     *
     * @return string|null
     */
    public function getSocialImageUrl()
    {
        return $this->container['social_image_url'];
    }

    /**
     * Sets social_image_url
     *
     * @param string|null $social_image_url Social media image URL
     *
     * @return self
     */
    public function setSocialImageUrl($social_image_url)
    {
        if (is_null($social_image_url)) {
            throw new \InvalidArgumentException('non-nullable social_image_url cannot be null');
        }
        $this->container['social_image_url'] = $social_image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


