<?php
/**
 * Contact
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendX REST API
 *
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br>
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sendx.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendx\model;

use \ArrayAccess;
use \sendx\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Contact implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'company' => 'string',
        'custom_fields' => 'array<string,string>',
        'unsubscribed' => 'bool',
        'bounced' => 'bool',
        'spam' => 'bool',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'blocked' => 'bool',
        'dropped' => 'bool',
        'ltv' => 'int',
        'contact_source' => 'int',
        'last_tracked_ip' => 'string',
        'lists' => 'string[]',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => 'email',
        'company' => null,
        'custom_fields' => null,
        'unsubscribed' => null,
        'bounced' => null,
        'spam' => null,
        'created' => 'date-time',
        'updated' => 'date-time',
        'blocked' => null,
        'dropped' => null,
        'ltv' => null,
        'contact_source' => null,
        'last_tracked_ip' => null,
        'lists' => null,
        'tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'company' => false,
        'custom_fields' => false,
        'unsubscribed' => false,
        'bounced' => false,
        'spam' => false,
        'created' => false,
        'updated' => false,
        'blocked' => false,
        'dropped' => false,
        'ltv' => false,
        'contact_source' => false,
        'last_tracked_ip' => false,
        'lists' => false,
        'tags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'company' => 'company',
        'custom_fields' => 'customFields',
        'unsubscribed' => 'unsubscribed',
        'bounced' => 'bounced',
        'spam' => 'spam',
        'created' => 'created',
        'updated' => 'updated',
        'blocked' => 'blocked',
        'dropped' => 'dropped',
        'ltv' => 'LTV',
        'contact_source' => 'contactSource',
        'last_tracked_ip' => 'lastTrackedIp',
        'lists' => 'lists',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'company' => 'setCompany',
        'custom_fields' => 'setCustomFields',
        'unsubscribed' => 'setUnsubscribed',
        'bounced' => 'setBounced',
        'spam' => 'setSpam',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'blocked' => 'setBlocked',
        'dropped' => 'setDropped',
        'ltv' => 'setLtv',
        'contact_source' => 'setContactSource',
        'last_tracked_ip' => 'setLastTrackedIp',
        'lists' => 'setLists',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'company' => 'getCompany',
        'custom_fields' => 'getCustomFields',
        'unsubscribed' => 'getUnsubscribed',
        'bounced' => 'getBounced',
        'spam' => 'getSpam',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'blocked' => 'getBlocked',
        'dropped' => 'getDropped',
        'ltv' => 'getLtv',
        'contact_source' => 'getContactSource',
        'last_tracked_ip' => 'getLastTrackedIp',
        'lists' => 'getLists',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTACT_SOURCE_0 = 0;
    public const CONTACT_SOURCE_1 = 1;
    public const CONTACT_SOURCE_2 = 2;
    public const CONTACT_SOURCE_3 = 3;
    public const CONTACT_SOURCE_4 = 4;
    public const CONTACT_SOURCE_5 = 5;
    public const CONTACT_SOURCE_6 = 6;
    public const CONTACT_SOURCE_7 = 7;
    public const CONTACT_SOURCE_8 = 8;
    public const CONTACT_SOURCE_9 = 9;
    public const CONTACT_SOURCE_10 = 10;
    public const CONTACT_SOURCE_11 = 11;
    public const CONTACT_SOURCE_12 = 12;
    public const CONTACT_SOURCE_13 = 13;
    public const CONTACT_SOURCE_14 = 14;
    public const CONTACT_SOURCE_15 = 15;
    public const CONTACT_SOURCE_16 = 16;
    public const CONTACT_SOURCE_17 = 17;
    public const CONTACT_SOURCE_18 = 18;
    public const CONTACT_SOURCE_19 = 19;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContactSourceAllowableValues()
    {
        return [
            self::CONTACT_SOURCE_0,
            self::CONTACT_SOURCE_1,
            self::CONTACT_SOURCE_2,
            self::CONTACT_SOURCE_3,
            self::CONTACT_SOURCE_4,
            self::CONTACT_SOURCE_5,
            self::CONTACT_SOURCE_6,
            self::CONTACT_SOURCE_7,
            self::CONTACT_SOURCE_8,
            self::CONTACT_SOURCE_9,
            self::CONTACT_SOURCE_10,
            self::CONTACT_SOURCE_11,
            self::CONTACT_SOURCE_12,
            self::CONTACT_SOURCE_13,
            self::CONTACT_SOURCE_14,
            self::CONTACT_SOURCE_15,
            self::CONTACT_SOURCE_16,
            self::CONTACT_SOURCE_17,
            self::CONTACT_SOURCE_18,
            self::CONTACT_SOURCE_19,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('unsubscribed', $data ?? [], null);
        $this->setIfExists('bounced', $data ?? [], null);
        $this->setIfExists('spam', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('dropped', $data ?? [], null);
        $this->setIfExists('ltv', $data ?? [], null);
        $this->setIfExists('contact_source', $data ?? [], null);
        $this->setIfExists('last_tracked_ip', $data ?? [], null);
        $this->setIfExists('lists', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContactSourceAllowableValues();
        if (!is_null($this->container['contact_source']) && !in_array($this->container['contact_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contact_source', must be one of '%s'",
                $this->container['contact_source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identifier for the contact.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the contact.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the contact.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the contact.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company The company of the contact.
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,string>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,string>|null $custom_fields Custom fields and their values
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return bool|null
     */
    public function getUnsubscribed()
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param bool|null $unsubscribed Indicates if the contact has unsubscribed from emails.
     *
     * @return self
     */
    public function setUnsubscribed($unsubscribed)
    {
        if (is_null($unsubscribed)) {
            throw new \InvalidArgumentException('non-nullable unsubscribed cannot be null');
        }
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }

    /**
     * Gets bounced
     *
     * @return bool|null
     */
    public function getBounced()
    {
        return $this->container['bounced'];
    }

    /**
     * Sets bounced
     *
     * @param bool|null $bounced Indicates if the contact's email has bounced.
     *
     * @return self
     */
    public function setBounced($bounced)
    {
        if (is_null($bounced)) {
            throw new \InvalidArgumentException('non-nullable bounced cannot be null');
        }
        $this->container['bounced'] = $bounced;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return bool|null
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param bool|null $spam Indicates if the contact marked the email as spam.
     *
     * @return self
     */
    public function setSpam($spam)
    {
        if (is_null($spam)) {
            throw new \InvalidArgumentException('non-nullable spam cannot be null');
        }
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The date and time when the contact was created.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated The date and time when the contact was last updated.
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool|null $blocked Indicates if the contact is blocked from receiving emails.
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        if (is_null($blocked)) {
            throw new \InvalidArgumentException('non-nullable blocked cannot be null');
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets dropped
     *
     * @return bool|null
     */
    public function getDropped()
    {
        return $this->container['dropped'];
    }

    /**
     * Sets dropped
     *
     * @param bool|null $dropped Indicates if emails to this contact were dropped.
     *
     * @return self
     */
    public function setDropped($dropped)
    {
        if (is_null($dropped)) {
            throw new \InvalidArgumentException('non-nullable dropped cannot be null');
        }
        $this->container['dropped'] = $dropped;

        return $this;
    }

    /**
     * Gets ltv
     *
     * @return int|null
     */
    public function getLtv()
    {
        return $this->container['ltv'];
    }

    /**
     * Sets ltv
     *
     * @param int|null $ltv Lifetime value (LTV) of the contact in currency units.
     *
     * @return self
     */
    public function setLtv($ltv)
    {
        if (is_null($ltv)) {
            throw new \InvalidArgumentException('non-nullable ltv cannot be null');
        }
        $this->container['ltv'] = $ltv;

        return $this;
    }

    /**
     * Gets contact_source
     *
     * @return int|null
     */
    public function getContactSource()
    {
        return $this->container['contact_source'];
    }

    /**
     * Sets contact_source
     *
     * @param int|null $contact_source The source from which the contact was added. Possible values:
     *
     * @return self
     */
    public function setContactSource($contact_source)
    {
        if (is_null($contact_source)) {
            throw new \InvalidArgumentException('non-nullable contact_source cannot be null');
        }
        $allowedValues = $this->getContactSourceAllowableValues();
        if (!in_array($contact_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contact_source', must be one of '%s'",
                    $contact_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contact_source'] = $contact_source;

        return $this;
    }

    /**
     * Gets last_tracked_ip
     *
     * @return string|null
     */
    public function getLastTrackedIp()
    {
        return $this->container['last_tracked_ip'];
    }

    /**
     * Sets last_tracked_ip
     *
     * @param string|null $last_tracked_ip The last known IP address tracked for the contact.
     *
     * @return self
     */
    public function setLastTrackedIp($last_tracked_ip)
    {
        if (is_null($last_tracked_ip)) {
            throw new \InvalidArgumentException('non-nullable last_tracked_ip cannot be null');
        }
        $this->container['last_tracked_ip'] = $last_tracked_ip;

        return $this;
    }

    /**
     * Gets lists
     *
     * @return string[]|null
     */
    public function getLists()
    {
        return $this->container['lists'];
    }

    /**
     * Sets lists
     *
     * @param string[]|null $lists A list of `lists` ids the contact is subscribed to.
     *
     * @return self
     */
    public function setLists($lists)
    {
        if (is_null($lists)) {
            throw new \InvalidArgumentException('non-nullable lists cannot be null');
        }
        $this->container['lists'] = $lists;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags `Tag` ids associated with the contact for segmentation or categorization.
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


