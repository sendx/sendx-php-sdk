<?php
/**
 * RestReportData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendX REST API
 *
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendx\model;

use \ArrayAccess;
use \sendx\ObjectSerializer;

/**
 * RestReportData Class Doc Comment
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestReportData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RestReportData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campaign_id' => 'string',
        'link_stats' => '\sendx\model\LinkStat[]',
        'clicked_unique_contact_count' => 'int',
        'opened_unique_contact_count' => 'int',
        'sent_contact_count' => 'int',
        'unsubscribe_contact_count' => 'int',
        'bounce_contact_count' => 'int',
        'spam_contact_count' => 'int',
        'clicked_contact_count' => 'int',
        'opened_contact_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'campaign_id' => null,
        'link_stats' => null,
        'clicked_unique_contact_count' => null,
        'opened_unique_contact_count' => null,
        'sent_contact_count' => null,
        'unsubscribe_contact_count' => null,
        'bounce_contact_count' => null,
        'spam_contact_count' => null,
        'clicked_contact_count' => null,
        'opened_contact_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'campaign_id' => false,
        'link_stats' => false,
        'clicked_unique_contact_count' => false,
        'opened_unique_contact_count' => false,
        'sent_contact_count' => false,
        'unsubscribe_contact_count' => false,
        'bounce_contact_count' => false,
        'spam_contact_count' => false,
        'clicked_contact_count' => false,
        'opened_contact_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_id' => 'campaignId',
        'link_stats' => 'linkStats',
        'clicked_unique_contact_count' => 'clickedUniqueContactCount',
        'opened_unique_contact_count' => 'openedUniqueContactCount',
        'sent_contact_count' => 'sentContactCount',
        'unsubscribe_contact_count' => 'unsubscribeContactCount',
        'bounce_contact_count' => 'bounceContactCount',
        'spam_contact_count' => 'spamContactCount',
        'clicked_contact_count' => 'clickedContactCount',
        'opened_contact_count' => 'openedContactCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_id' => 'setCampaignId',
        'link_stats' => 'setLinkStats',
        'clicked_unique_contact_count' => 'setClickedUniqueContactCount',
        'opened_unique_contact_count' => 'setOpenedUniqueContactCount',
        'sent_contact_count' => 'setSentContactCount',
        'unsubscribe_contact_count' => 'setUnsubscribeContactCount',
        'bounce_contact_count' => 'setBounceContactCount',
        'spam_contact_count' => 'setSpamContactCount',
        'clicked_contact_count' => 'setClickedContactCount',
        'opened_contact_count' => 'setOpenedContactCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_id' => 'getCampaignId',
        'link_stats' => 'getLinkStats',
        'clicked_unique_contact_count' => 'getClickedUniqueContactCount',
        'opened_unique_contact_count' => 'getOpenedUniqueContactCount',
        'sent_contact_count' => 'getSentContactCount',
        'unsubscribe_contact_count' => 'getUnsubscribeContactCount',
        'bounce_contact_count' => 'getBounceContactCount',
        'spam_contact_count' => 'getSpamContactCount',
        'clicked_contact_count' => 'getClickedContactCount',
        'opened_contact_count' => 'getOpenedContactCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('link_stats', $data ?? [], null);
        $this->setIfExists('clicked_unique_contact_count', $data ?? [], null);
        $this->setIfExists('opened_unique_contact_count', $data ?? [], null);
        $this->setIfExists('sent_contact_count', $data ?? [], null);
        $this->setIfExists('unsubscribe_contact_count', $data ?? [], null);
        $this->setIfExists('bounce_contact_count', $data ?? [], null);
        $this->setIfExists('spam_contact_count', $data ?? [], null);
        $this->setIfExists('clicked_contact_count', $data ?? [], null);
        $this->setIfExists('opened_contact_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id Unique identifier of the campaign
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets link_stats
     *
     * @return \sendx\model\LinkStat[]|null
     */
    public function getLinkStats()
    {
        return $this->container['link_stats'];
    }

    /**
     * Sets link_stats
     *
     * @param \sendx\model\LinkStat[]|null $link_stats link_stats
     *
     * @return self
     */
    public function setLinkStats($link_stats)
    {
        if (is_null($link_stats)) {
            throw new \InvalidArgumentException('non-nullable link_stats cannot be null');
        }
        $this->container['link_stats'] = $link_stats;

        return $this;
    }

    /**
     * Gets clicked_unique_contact_count
     *
     * @return int|null
     */
    public function getClickedUniqueContactCount()
    {
        return $this->container['clicked_unique_contact_count'];
    }

    /**
     * Sets clicked_unique_contact_count
     *
     * @param int|null $clicked_unique_contact_count Total number of unique contacts who clicked on the link
     *
     * @return self
     */
    public function setClickedUniqueContactCount($clicked_unique_contact_count)
    {
        if (is_null($clicked_unique_contact_count)) {
            throw new \InvalidArgumentException('non-nullable clicked_unique_contact_count cannot be null');
        }
        $this->container['clicked_unique_contact_count'] = $clicked_unique_contact_count;

        return $this;
    }

    /**
     * Gets opened_unique_contact_count
     *
     * @return int|null
     */
    public function getOpenedUniqueContactCount()
    {
        return $this->container['opened_unique_contact_count'];
    }

    /**
     * Sets opened_unique_contact_count
     *
     * @param int|null $opened_unique_contact_count Total number of unique contacts who opened the link
     *
     * @return self
     */
    public function setOpenedUniqueContactCount($opened_unique_contact_count)
    {
        if (is_null($opened_unique_contact_count)) {
            throw new \InvalidArgumentException('non-nullable opened_unique_contact_count cannot be null');
        }
        $this->container['opened_unique_contact_count'] = $opened_unique_contact_count;

        return $this;
    }

    /**
     * Gets sent_contact_count
     *
     * @return int|null
     */
    public function getSentContactCount()
    {
        return $this->container['sent_contact_count'];
    }

    /**
     * Sets sent_contact_count
     *
     * @param int|null $sent_contact_count Total number of contacts who sent the link
     *
     * @return self
     */
    public function setSentContactCount($sent_contact_count)
    {
        if (is_null($sent_contact_count)) {
            throw new \InvalidArgumentException('non-nullable sent_contact_count cannot be null');
        }
        $this->container['sent_contact_count'] = $sent_contact_count;

        return $this;
    }

    /**
     * Gets unsubscribe_contact_count
     *
     * @return int|null
     */
    public function getUnsubscribeContactCount()
    {
        return $this->container['unsubscribe_contact_count'];
    }

    /**
     * Sets unsubscribe_contact_count
     *
     * @param int|null $unsubscribe_contact_count Total number of contacts who unsubscribed from the link
     *
     * @return self
     */
    public function setUnsubscribeContactCount($unsubscribe_contact_count)
    {
        if (is_null($unsubscribe_contact_count)) {
            throw new \InvalidArgumentException('non-nullable unsubscribe_contact_count cannot be null');
        }
        $this->container['unsubscribe_contact_count'] = $unsubscribe_contact_count;

        return $this;
    }

    /**
     * Gets bounce_contact_count
     *
     * @return int|null
     */
    public function getBounceContactCount()
    {
        return $this->container['bounce_contact_count'];
    }

    /**
     * Sets bounce_contact_count
     *
     * @param int|null $bounce_contact_count Total number of contacts who bounced the link
     *
     * @return self
     */
    public function setBounceContactCount($bounce_contact_count)
    {
        if (is_null($bounce_contact_count)) {
            throw new \InvalidArgumentException('non-nullable bounce_contact_count cannot be null');
        }
        $this->container['bounce_contact_count'] = $bounce_contact_count;

        return $this;
    }

    /**
     * Gets spam_contact_count
     *
     * @return int|null
     */
    public function getSpamContactCount()
    {
        return $this->container['spam_contact_count'];
    }

    /**
     * Sets spam_contact_count
     *
     * @param int|null $spam_contact_count Total number of contacts who marked the link as spam
     *
     * @return self
     */
    public function setSpamContactCount($spam_contact_count)
    {
        if (is_null($spam_contact_count)) {
            throw new \InvalidArgumentException('non-nullable spam_contact_count cannot be null');
        }
        $this->container['spam_contact_count'] = $spam_contact_count;

        return $this;
    }

    /**
     * Gets clicked_contact_count
     *
     * @return int|null
     */
    public function getClickedContactCount()
    {
        return $this->container['clicked_contact_count'];
    }

    /**
     * Sets clicked_contact_count
     *
     * @param int|null $clicked_contact_count Total number of contacts who clicked on the link
     *
     * @return self
     */
    public function setClickedContactCount($clicked_contact_count)
    {
        if (is_null($clicked_contact_count)) {
            throw new \InvalidArgumentException('non-nullable clicked_contact_count cannot be null');
        }
        $this->container['clicked_contact_count'] = $clicked_contact_count;

        return $this;
    }

    /**
     * Gets opened_contact_count
     *
     * @return int|null
     */
    public function getOpenedContactCount()
    {
        return $this->container['opened_contact_count'];
    }

    /**
     * Sets opened_contact_count
     *
     * @param int|null $opened_contact_count Total number of contacts who opened the link
     *
     * @return self
     */
    public function setOpenedContactCount($opened_contact_count)
    {
        if (is_null($opened_contact_count)) {
            throw new \InvalidArgumentException('non-nullable opened_contact_count cannot be null');
        }
        $this->container['opened_contact_count'] = $opened_contact_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


