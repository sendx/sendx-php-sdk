<?php
/**
 * Campaign
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendX REST API
 *
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br>
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@sendx.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendx\model;

use \ArrayAccess;
use \sendx\ObjectSerializer;

/**
 * Campaign Class Doc Comment
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Campaign implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Campaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'track_reply' => 'bool',
        'status' => 'int',
        'schedule_type' => 'int',
        'schedule_condition' => 'string',
        'time_condition' => 'string',
        'timezone' => 'string',
        'preferred_time_condition' => 'string',
        'preferred_timezone' => 'string',
        'strategy' => 'string',
        'send_in_contacts_timezone' => 'bool',
        'smart_send' => 'bool',
        'is_archived' => 'bool',
        'sender' => 'string',
        'campaign_screenshot_url' => 'string',
        'included_segments' => 'string[]',
        'included_lists' => 'string[]',
        'included_tags' => 'string[]',
        'excluded_segments' => 'string[]',
        'excluded_lists' => 'string[]',
        'excluded_tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'track_reply' => null,
        'status' => null,
        'schedule_type' => null,
        'schedule_condition' => null,
        'time_condition' => null,
        'timezone' => null,
        'preferred_time_condition' => null,
        'preferred_timezone' => null,
        'strategy' => null,
        'send_in_contacts_timezone' => null,
        'smart_send' => null,
        'is_archived' => null,
        'sender' => null,
        'campaign_screenshot_url' => null,
        'included_segments' => null,
        'included_lists' => null,
        'included_tags' => null,
        'excluded_segments' => null,
        'excluded_lists' => null,
        'excluded_tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'track_reply' => false,
        'status' => false,
        'schedule_type' => false,
        'schedule_condition' => false,
        'time_condition' => false,
        'timezone' => false,
        'preferred_time_condition' => false,
        'preferred_timezone' => false,
        'strategy' => false,
        'send_in_contacts_timezone' => false,
        'smart_send' => false,
        'is_archived' => false,
        'sender' => false,
        'campaign_screenshot_url' => false,
        'included_segments' => false,
        'included_lists' => false,
        'included_tags' => false,
        'excluded_segments' => false,
        'excluded_lists' => false,
        'excluded_tags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'track_reply' => 'trackReply',
        'status' => 'status',
        'schedule_type' => 'scheduleType',
        'schedule_condition' => 'scheduleCondition',
        'time_condition' => 'timeCondition',
        'timezone' => 'timezone',
        'preferred_time_condition' => 'preferredTimeCondition',
        'preferred_timezone' => 'preferredTimezone',
        'strategy' => 'strategy',
        'send_in_contacts_timezone' => 'sendInContactsTimezone',
        'smart_send' => 'smartSend',
        'is_archived' => 'isArchived',
        'sender' => 'sender',
        'campaign_screenshot_url' => 'campaignScreenshotUrl',
        'included_segments' => 'includedSegments',
        'included_lists' => 'includedLists',
        'included_tags' => 'includedTags',
        'excluded_segments' => 'excludedSegments',
        'excluded_lists' => 'excludedLists',
        'excluded_tags' => 'excludedTags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'track_reply' => 'setTrackReply',
        'status' => 'setStatus',
        'schedule_type' => 'setScheduleType',
        'schedule_condition' => 'setScheduleCondition',
        'time_condition' => 'setTimeCondition',
        'timezone' => 'setTimezone',
        'preferred_time_condition' => 'setPreferredTimeCondition',
        'preferred_timezone' => 'setPreferredTimezone',
        'strategy' => 'setStrategy',
        'send_in_contacts_timezone' => 'setSendInContactsTimezone',
        'smart_send' => 'setSmartSend',
        'is_archived' => 'setIsArchived',
        'sender' => 'setSender',
        'campaign_screenshot_url' => 'setCampaignScreenshotUrl',
        'included_segments' => 'setIncludedSegments',
        'included_lists' => 'setIncludedLists',
        'included_tags' => 'setIncludedTags',
        'excluded_segments' => 'setExcludedSegments',
        'excluded_lists' => 'setExcludedLists',
        'excluded_tags' => 'setExcludedTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'track_reply' => 'getTrackReply',
        'status' => 'getStatus',
        'schedule_type' => 'getScheduleType',
        'schedule_condition' => 'getScheduleCondition',
        'time_condition' => 'getTimeCondition',
        'timezone' => 'getTimezone',
        'preferred_time_condition' => 'getPreferredTimeCondition',
        'preferred_timezone' => 'getPreferredTimezone',
        'strategy' => 'getStrategy',
        'send_in_contacts_timezone' => 'getSendInContactsTimezone',
        'smart_send' => 'getSmartSend',
        'is_archived' => 'getIsArchived',
        'sender' => 'getSender',
        'campaign_screenshot_url' => 'getCampaignScreenshotUrl',
        'included_segments' => 'getIncludedSegments',
        'included_lists' => 'getIncludedLists',
        'included_tags' => 'getIncludedTags',
        'excluded_segments' => 'getExcludedSegments',
        'excluded_lists' => 'getExcludedLists',
        'excluded_tags' => 'getExcludedTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_0 = 0;
    public const STATUS_1 = 1;
    public const STATUS_2 = 2;
    public const STATUS_3 = 3;
    public const STATUS_4 = 4;
    public const SCHEDULE_TYPE_0 = 0;
    public const SCHEDULE_TYPE_1 = 1;
    public const SCHEDULE_TYPE_2 = 2;
    public const SCHEDULE_TYPE_3 = 3;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_0,
            self::STATUS_1,
            self::STATUS_2,
            self::STATUS_3,
            self::STATUS_4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleTypeAllowableValues()
    {
        return [
            self::SCHEDULE_TYPE_0,
            self::SCHEDULE_TYPE_1,
            self::SCHEDULE_TYPE_2,
            self::SCHEDULE_TYPE_3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('track_reply', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('schedule_type', $data ?? [], null);
        $this->setIfExists('schedule_condition', $data ?? [], null);
        $this->setIfExists('time_condition', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('preferred_time_condition', $data ?? [], null);
        $this->setIfExists('preferred_timezone', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('send_in_contacts_timezone', $data ?? [], null);
        $this->setIfExists('smart_send', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('campaign_screenshot_url', $data ?? [], null);
        $this->setIfExists('included_segments', $data ?? [], null);
        $this->setIfExists('included_lists', $data ?? [], null);
        $this->setIfExists('included_tags', $data ?? [], null);
        $this->setIfExists('excluded_segments', $data ?? [], null);
        $this->setIfExists('excluded_lists', $data ?? [], null);
        $this->setIfExists('excluded_tags', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($this->container['schedule_type']) && !in_array($this->container['schedule_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schedule_type', must be one of '%s'",
                $this->container['schedule_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Encrypted ID of the campaign
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the campaign
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets track_reply
     *
     * @return bool|null
     */
    public function getTrackReply()
    {
        return $this->container['track_reply'];
    }

    /**
     * Sets track_reply
     *
     * @param bool|null $track_reply Indicates if replies to the campaign should be tracked
     *
     * @return self
     */
    public function setTrackReply($track_reply)
    {
        if (is_null($track_reply)) {
            throw new \InvalidArgumentException('non-nullable track_reply cannot be null');
        }
        $this->container['track_reply'] = $track_reply;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Campaign status: 0 (Draft), 1 (Scheduled), 2 (Sending), 3 (Sent), 4 (Quarantined)
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return int|null
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param int|null $schedule_type Schedule type: 0 (Schedule later), 1 (Send Now), 2 (Trigger via automation), 3 (Recurring)
     *
     * @return self
     */
    public function setScheduleType($schedule_type)
    {
        if (is_null($schedule_type)) {
            throw new \InvalidArgumentException('non-nullable schedule_type cannot be null');
        }
        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!in_array($schedule_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schedule_type', must be one of '%s'",
                    $schedule_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets schedule_condition
     *
     * @return string|null
     */
    public function getScheduleCondition()
    {
        return $this->container['schedule_condition'];
    }

    /**
     * Sets schedule_condition
     *
     * @param string|null $schedule_condition Condition for scheduling the campaign
     *
     * @return self
     */
    public function setScheduleCondition($schedule_condition)
    {
        if (is_null($schedule_condition)) {
            throw new \InvalidArgumentException('non-nullable schedule_condition cannot be null');
        }
        $this->container['schedule_condition'] = $schedule_condition;

        return $this;
    }

    /**
     * Gets time_condition
     *
     * @return string|null
     */
    public function getTimeCondition()
    {
        return $this->container['time_condition'];
    }

    /**
     * Sets time_condition
     *
     * @param string|null $time_condition Time-related condition for the campaign
     *
     * @return self
     */
    public function setTimeCondition($time_condition)
    {
        if (is_null($time_condition)) {
            throw new \InvalidArgumentException('non-nullable time_condition cannot be null');
        }
        $this->container['time_condition'] = $time_condition;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Timezone for the scheduled send
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets preferred_time_condition
     *
     * @return string|null
     */
    public function getPreferredTimeCondition()
    {
        return $this->container['preferred_time_condition'];
    }

    /**
     * Sets preferred_time_condition
     *
     * @param string|null $preferred_time_condition Preferred time condition for the campaign
     *
     * @return self
     */
    public function setPreferredTimeCondition($preferred_time_condition)
    {
        if (is_null($preferred_time_condition)) {
            throw new \InvalidArgumentException('non-nullable preferred_time_condition cannot be null');
        }
        $this->container['preferred_time_condition'] = $preferred_time_condition;

        return $this;
    }

    /**
     * Gets preferred_timezone
     *
     * @return string|null
     */
    public function getPreferredTimezone()
    {
        return $this->container['preferred_timezone'];
    }

    /**
     * Sets preferred_timezone
     *
     * @param string|null $preferred_timezone Preferred timezone for sending the campaign
     *
     * @return self
     */
    public function setPreferredTimezone($preferred_timezone)
    {
        if (is_null($preferred_timezone)) {
            throw new \InvalidArgumentException('non-nullable preferred_timezone cannot be null');
        }
        $this->container['preferred_timezone'] = $preferred_timezone;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string|null
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string|null $strategy Strategy for the campaign
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets send_in_contacts_timezone
     *
     * @return bool|null
     */
    public function getSendInContactsTimezone()
    {
        return $this->container['send_in_contacts_timezone'];
    }

    /**
     * Sets send_in_contacts_timezone
     *
     * @param bool|null $send_in_contacts_timezone Indicates if the campaign should be sent in the recipient's timezone
     *
     * @return self
     */
    public function setSendInContactsTimezone($send_in_contacts_timezone)
    {
        if (is_null($send_in_contacts_timezone)) {
            throw new \InvalidArgumentException('non-nullable send_in_contacts_timezone cannot be null');
        }
        $this->container['send_in_contacts_timezone'] = $send_in_contacts_timezone;

        return $this;
    }

    /**
     * Gets smart_send
     *
     * @return bool|null
     */
    public function getSmartSend()
    {
        return $this->container['smart_send'];
    }

    /**
     * Sets smart_send
     *
     * @param bool|null $smart_send Indicates if smart sending should be used
     *
     * @return self
     */
    public function setSmartSend($smart_send)
    {
        if (is_null($smart_send)) {
            throw new \InvalidArgumentException('non-nullable smart_send cannot be null');
        }
        $this->container['smart_send'] = $smart_send;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived Indicates if the campaign is archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string|null $sender Information about the sender of the campaign
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets campaign_screenshot_url
     *
     * @return string|null
     */
    public function getCampaignScreenshotUrl()
    {
        return $this->container['campaign_screenshot_url'];
    }

    /**
     * Sets campaign_screenshot_url
     *
     * @param string|null $campaign_screenshot_url URL of the campaign's screenshot
     *
     * @return self
     */
    public function setCampaignScreenshotUrl($campaign_screenshot_url)
    {
        if (is_null($campaign_screenshot_url)) {
            throw new \InvalidArgumentException('non-nullable campaign_screenshot_url cannot be null');
        }
        $this->container['campaign_screenshot_url'] = $campaign_screenshot_url;

        return $this;
    }

    /**
     * Gets included_segments
     *
     * @return string[]|null
     */
    public function getIncludedSegments()
    {
        return $this->container['included_segments'];
    }

    /**
     * Sets included_segments
     *
     * @param string[]|null $included_segments Segments to be included in the campaign
     *
     * @return self
     */
    public function setIncludedSegments($included_segments)
    {
        if (is_null($included_segments)) {
            throw new \InvalidArgumentException('non-nullable included_segments cannot be null');
        }
        $this->container['included_segments'] = $included_segments;

        return $this;
    }

    /**
     * Gets included_lists
     *
     * @return string[]|null
     */
    public function getIncludedLists()
    {
        return $this->container['included_lists'];
    }

    /**
     * Sets included_lists
     *
     * @param string[]|null $included_lists Lists to be included in the campaign
     *
     * @return self
     */
    public function setIncludedLists($included_lists)
    {
        if (is_null($included_lists)) {
            throw new \InvalidArgumentException('non-nullable included_lists cannot be null');
        }
        $this->container['included_lists'] = $included_lists;

        return $this;
    }

    /**
     * Gets included_tags
     *
     * @return string[]|null
     */
    public function getIncludedTags()
    {
        return $this->container['included_tags'];
    }

    /**
     * Sets included_tags
     *
     * @param string[]|null $included_tags Tags to be included in the campaign
     *
     * @return self
     */
    public function setIncludedTags($included_tags)
    {
        if (is_null($included_tags)) {
            throw new \InvalidArgumentException('non-nullable included_tags cannot be null');
        }
        $this->container['included_tags'] = $included_tags;

        return $this;
    }

    /**
     * Gets excluded_segments
     *
     * @return string[]|null
     */
    public function getExcludedSegments()
    {
        return $this->container['excluded_segments'];
    }

    /**
     * Sets excluded_segments
     *
     * @param string[]|null $excluded_segments Segments to be excluded from the campaign
     *
     * @return self
     */
    public function setExcludedSegments($excluded_segments)
    {
        if (is_null($excluded_segments)) {
            throw new \InvalidArgumentException('non-nullable excluded_segments cannot be null');
        }
        $this->container['excluded_segments'] = $excluded_segments;

        return $this;
    }

    /**
     * Gets excluded_lists
     *
     * @return string[]|null
     */
    public function getExcludedLists()
    {
        return $this->container['excluded_lists'];
    }

    /**
     * Sets excluded_lists
     *
     * @param string[]|null $excluded_lists Lists to be excluded from the campaign
     *
     * @return self
     */
    public function setExcludedLists($excluded_lists)
    {
        if (is_null($excluded_lists)) {
            throw new \InvalidArgumentException('non-nullable excluded_lists cannot be null');
        }
        $this->container['excluded_lists'] = $excluded_lists;

        return $this;
    }

    /**
     * Gets excluded_tags
     *
     * @return string[]|null
     */
    public function getExcludedTags()
    {
        return $this->container['excluded_tags'];
    }

    /**
     * Sets excluded_tags
     *
     * @param string[]|null $excluded_tags Tags to be excluded from the campaign
     *
     * @return self
     */
    public function setExcludedTags($excluded_tags)
    {
        if (is_null($excluded_tags)) {
            throw new \InvalidArgumentException('non-nullable excluded_tags cannot be null');
        }
        $this->container['excluded_tags'] = $excluded_tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


