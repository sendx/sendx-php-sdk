<?php
/**
 * ReportData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendX REST API
 *
 * # Introduction SendX is an email marketing product. It helps you convert website visitors to customers, send them promotional emails, engage with them using drip sequences and craft custom journeys using powerful but simple automations. The SendX API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. The SendX Rest API doesnâ€™t support bulk updates. You can work on only one object per request. <br>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendx.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendx\model;

use \ArrayAccess;
use \sendx\ObjectSerializer;

/**
 * ReportData Class Doc Comment
 *
 * @category Class
 * @description Contains the report data for a given campaign
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'campaign_id' => 'string',
        'link_stats' => 'array<string,int>',
        'clicked_contact_count' => 'int',
        'opened_contact_count' => 'int',
        'replied_contact_count' => 'int',
        'clicked_unique_contact_count' => 'int',
        'opened_unique_contact_count' => 'int',
        'replied_unique_contact_count' => 'int',
        'sent_contact_count' => 'int',
        'unsubscribe_contact_count' => 'int',
        'bounce_contact_count' => 'int',
        'spam_contact_count' => 'int',
        'email_revenue' => 'string',
        'revenue_per_recipient' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'campaign_id' => null,
        'link_stats' => null,
        'clicked_contact_count' => null,
        'opened_contact_count' => null,
        'replied_contact_count' => null,
        'clicked_unique_contact_count' => null,
        'opened_unique_contact_count' => null,
        'replied_unique_contact_count' => null,
        'sent_contact_count' => null,
        'unsubscribe_contact_count' => null,
        'bounce_contact_count' => null,
        'spam_contact_count' => null,
        'email_revenue' => null,
        'revenue_per_recipient' => null,
        'currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'campaign_id' => false,
        'link_stats' => false,
        'clicked_contact_count' => false,
        'opened_contact_count' => false,
        'replied_contact_count' => false,
        'clicked_unique_contact_count' => false,
        'opened_unique_contact_count' => false,
        'replied_unique_contact_count' => false,
        'sent_contact_count' => false,
        'unsubscribe_contact_count' => false,
        'bounce_contact_count' => false,
        'spam_contact_count' => false,
        'email_revenue' => false,
        'revenue_per_recipient' => false,
        'currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_id' => 'campaignId',
        'link_stats' => 'linkStats',
        'clicked_contact_count' => 'clickedContactCount',
        'opened_contact_count' => 'openedContactCount',
        'replied_contact_count' => 'repliedContactCount',
        'clicked_unique_contact_count' => 'clickedUniqueContactCount',
        'opened_unique_contact_count' => 'openedUniqueContactCount',
        'replied_unique_contact_count' => 'repliedUniqueContactCount',
        'sent_contact_count' => 'sentContactCount',
        'unsubscribe_contact_count' => 'unsubscribeContactCount',
        'bounce_contact_count' => 'bounceContactCount',
        'spam_contact_count' => 'spamContactCount',
        'email_revenue' => 'emailRevenue',
        'revenue_per_recipient' => 'revenuePerRecipient',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_id' => 'setCampaignId',
        'link_stats' => 'setLinkStats',
        'clicked_contact_count' => 'setClickedContactCount',
        'opened_contact_count' => 'setOpenedContactCount',
        'replied_contact_count' => 'setRepliedContactCount',
        'clicked_unique_contact_count' => 'setClickedUniqueContactCount',
        'opened_unique_contact_count' => 'setOpenedUniqueContactCount',
        'replied_unique_contact_count' => 'setRepliedUniqueContactCount',
        'sent_contact_count' => 'setSentContactCount',
        'unsubscribe_contact_count' => 'setUnsubscribeContactCount',
        'bounce_contact_count' => 'setBounceContactCount',
        'spam_contact_count' => 'setSpamContactCount',
        'email_revenue' => 'setEmailRevenue',
        'revenue_per_recipient' => 'setRevenuePerRecipient',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_id' => 'getCampaignId',
        'link_stats' => 'getLinkStats',
        'clicked_contact_count' => 'getClickedContactCount',
        'opened_contact_count' => 'getOpenedContactCount',
        'replied_contact_count' => 'getRepliedContactCount',
        'clicked_unique_contact_count' => 'getClickedUniqueContactCount',
        'opened_unique_contact_count' => 'getOpenedUniqueContactCount',
        'replied_unique_contact_count' => 'getRepliedUniqueContactCount',
        'sent_contact_count' => 'getSentContactCount',
        'unsubscribe_contact_count' => 'getUnsubscribeContactCount',
        'bounce_contact_count' => 'getBounceContactCount',
        'spam_contact_count' => 'getSpamContactCount',
        'email_revenue' => 'getEmailRevenue',
        'revenue_per_recipient' => 'getRevenuePerRecipient',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('link_stats', $data ?? [], null);
        $this->setIfExists('clicked_contact_count', $data ?? [], null);
        $this->setIfExists('opened_contact_count', $data ?? [], null);
        $this->setIfExists('replied_contact_count', $data ?? [], null);
        $this->setIfExists('clicked_unique_contact_count', $data ?? [], null);
        $this->setIfExists('opened_unique_contact_count', $data ?? [], null);
        $this->setIfExists('replied_unique_contact_count', $data ?? [], null);
        $this->setIfExists('sent_contact_count', $data ?? [], null);
        $this->setIfExists('unsubscribe_contact_count', $data ?? [], null);
        $this->setIfExists('bounce_contact_count', $data ?? [], null);
        $this->setIfExists('spam_contact_count', $data ?? [], null);
        $this->setIfExists('email_revenue', $data ?? [], null);
        $this->setIfExists('revenue_per_recipient', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id The ID of the campaign
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets link_stats
     *
     * @return array<string,int>|null
     */
    public function getLinkStats()
    {
        return $this->container['link_stats'];
    }

    /**
     * Sets link_stats
     *
     * @param array<string,int>|null $link_stats Statistics about the links clicked within the campaign
     *
     * @return self
     */
    public function setLinkStats($link_stats)
    {
        if (is_null($link_stats)) {
            throw new \InvalidArgumentException('non-nullable link_stats cannot be null');
        }
        $this->container['link_stats'] = $link_stats;

        return $this;
    }

    /**
     * Gets clicked_contact_count
     *
     * @return int|null
     */
    public function getClickedContactCount()
    {
        return $this->container['clicked_contact_count'];
    }

    /**
     * Sets clicked_contact_count
     *
     * @param int|null $clicked_contact_count The total number of contacts that clicked on any link
     *
     * @return self
     */
    public function setClickedContactCount($clicked_contact_count)
    {
        if (is_null($clicked_contact_count)) {
            throw new \InvalidArgumentException('non-nullable clicked_contact_count cannot be null');
        }
        $this->container['clicked_contact_count'] = $clicked_contact_count;

        return $this;
    }

    /**
     * Gets opened_contact_count
     *
     * @return int|null
     */
    public function getOpenedContactCount()
    {
        return $this->container['opened_contact_count'];
    }

    /**
     * Sets opened_contact_count
     *
     * @param int|null $opened_contact_count The total number of contacts that opened the campaign email
     *
     * @return self
     */
    public function setOpenedContactCount($opened_contact_count)
    {
        if (is_null($opened_contact_count)) {
            throw new \InvalidArgumentException('non-nullable opened_contact_count cannot be null');
        }
        $this->container['opened_contact_count'] = $opened_contact_count;

        return $this;
    }

    /**
     * Gets replied_contact_count
     *
     * @return int|null
     */
    public function getRepliedContactCount()
    {
        return $this->container['replied_contact_count'];
    }

    /**
     * Sets replied_contact_count
     *
     * @param int|null $replied_contact_count The total number of contacts that replied to the campaign email
     *
     * @return self
     */
    public function setRepliedContactCount($replied_contact_count)
    {
        if (is_null($replied_contact_count)) {
            throw new \InvalidArgumentException('non-nullable replied_contact_count cannot be null');
        }
        $this->container['replied_contact_count'] = $replied_contact_count;

        return $this;
    }

    /**
     * Gets clicked_unique_contact_count
     *
     * @return int|null
     */
    public function getClickedUniqueContactCount()
    {
        return $this->container['clicked_unique_contact_count'];
    }

    /**
     * Sets clicked_unique_contact_count
     *
     * @param int|null $clicked_unique_contact_count The unique number of contacts that clicked on any link
     *
     * @return self
     */
    public function setClickedUniqueContactCount($clicked_unique_contact_count)
    {
        if (is_null($clicked_unique_contact_count)) {
            throw new \InvalidArgumentException('non-nullable clicked_unique_contact_count cannot be null');
        }
        $this->container['clicked_unique_contact_count'] = $clicked_unique_contact_count;

        return $this;
    }

    /**
     * Gets opened_unique_contact_count
     *
     * @return int|null
     */
    public function getOpenedUniqueContactCount()
    {
        return $this->container['opened_unique_contact_count'];
    }

    /**
     * Sets opened_unique_contact_count
     *
     * @param int|null $opened_unique_contact_count The unique number of contacts that opened the campaign email
     *
     * @return self
     */
    public function setOpenedUniqueContactCount($opened_unique_contact_count)
    {
        if (is_null($opened_unique_contact_count)) {
            throw new \InvalidArgumentException('non-nullable opened_unique_contact_count cannot be null');
        }
        $this->container['opened_unique_contact_count'] = $opened_unique_contact_count;

        return $this;
    }

    /**
     * Gets replied_unique_contact_count
     *
     * @return int|null
     */
    public function getRepliedUniqueContactCount()
    {
        return $this->container['replied_unique_contact_count'];
    }

    /**
     * Sets replied_unique_contact_count
     *
     * @param int|null $replied_unique_contact_count The unique number of contacts that replied to the campaign email
     *
     * @return self
     */
    public function setRepliedUniqueContactCount($replied_unique_contact_count)
    {
        if (is_null($replied_unique_contact_count)) {
            throw new \InvalidArgumentException('non-nullable replied_unique_contact_count cannot be null');
        }
        $this->container['replied_unique_contact_count'] = $replied_unique_contact_count;

        return $this;
    }

    /**
     * Gets sent_contact_count
     *
     * @return int|null
     */
    public function getSentContactCount()
    {
        return $this->container['sent_contact_count'];
    }

    /**
     * Sets sent_contact_count
     *
     * @param int|null $sent_contact_count The total number of contacts the campaign was sent to
     *
     * @return self
     */
    public function setSentContactCount($sent_contact_count)
    {
        if (is_null($sent_contact_count)) {
            throw new \InvalidArgumentException('non-nullable sent_contact_count cannot be null');
        }
        $this->container['sent_contact_count'] = $sent_contact_count;

        return $this;
    }

    /**
     * Gets unsubscribe_contact_count
     *
     * @return int|null
     */
    public function getUnsubscribeContactCount()
    {
        return $this->container['unsubscribe_contact_count'];
    }

    /**
     * Sets unsubscribe_contact_count
     *
     * @param int|null $unsubscribe_contact_count The total number of contacts that unsubscribed
     *
     * @return self
     */
    public function setUnsubscribeContactCount($unsubscribe_contact_count)
    {
        if (is_null($unsubscribe_contact_count)) {
            throw new \InvalidArgumentException('non-nullable unsubscribe_contact_count cannot be null');
        }
        $this->container['unsubscribe_contact_count'] = $unsubscribe_contact_count;

        return $this;
    }

    /**
     * Gets bounce_contact_count
     *
     * @return int|null
     */
    public function getBounceContactCount()
    {
        return $this->container['bounce_contact_count'];
    }

    /**
     * Sets bounce_contact_count
     *
     * @param int|null $bounce_contact_count The total number of bounced contacts
     *
     * @return self
     */
    public function setBounceContactCount($bounce_contact_count)
    {
        if (is_null($bounce_contact_count)) {
            throw new \InvalidArgumentException('non-nullable bounce_contact_count cannot be null');
        }
        $this->container['bounce_contact_count'] = $bounce_contact_count;

        return $this;
    }

    /**
     * Gets spam_contact_count
     *
     * @return int|null
     */
    public function getSpamContactCount()
    {
        return $this->container['spam_contact_count'];
    }

    /**
     * Sets spam_contact_count
     *
     * @param int|null $spam_contact_count The total number of contacts that marked the email as spam
     *
     * @return self
     */
    public function setSpamContactCount($spam_contact_count)
    {
        if (is_null($spam_contact_count)) {
            throw new \InvalidArgumentException('non-nullable spam_contact_count cannot be null');
        }
        $this->container['spam_contact_count'] = $spam_contact_count;

        return $this;
    }

    /**
     * Gets email_revenue
     *
     * @return string|null
     */
    public function getEmailRevenue()
    {
        return $this->container['email_revenue'];
    }

    /**
     * Sets email_revenue
     *
     * @param string|null $email_revenue The total revenue generated from the campaign email
     *
     * @return self
     */
    public function setEmailRevenue($email_revenue)
    {
        if (is_null($email_revenue)) {
            throw new \InvalidArgumentException('non-nullable email_revenue cannot be null');
        }
        $this->container['email_revenue'] = $email_revenue;

        return $this;
    }

    /**
     * Gets revenue_per_recipient
     *
     * @return string|null
     */
    public function getRevenuePerRecipient()
    {
        return $this->container['revenue_per_recipient'];
    }

    /**
     * Sets revenue_per_recipient
     *
     * @param string|null $revenue_per_recipient The average revenue generated per recipient
     *
     * @return self
     */
    public function setRevenuePerRecipient($revenue_per_recipient)
    {
        if (is_null($revenue_per_recipient)) {
            throw new \InvalidArgumentException('non-nullable revenue_per_recipient cannot be null');
        }
        $this->container['revenue_per_recipient'] = $revenue_per_recipient;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency in which the revenue is measured
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


