<?php
/**
 * RestRCampaign
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SendX REST API
 *
 * # SendX REST API Documentation  ## üöÄ Introduction  The SendX API is organized around REST principles. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  **Key Features:** - üîí **Security**: Team-based authentication with optional member-level access - üéØ **Resource-Oriented**: RESTful design with clear resource boundaries - üìä **Rich Data Models**: Three-layer model system (Input/Output/Internal) - üîó **Relationships**: Automatic prefix handling for resource relationships - üìà **Scalable**: Built for high-volume email marketing operations  ## üèóÔ∏è Architecture Overview  SendX uses a three-layer model architecture:  1. **Input Models** (`RestE*`): For API requests 2. **Output Models** (`RestR*`): For API responses with prefixed IDs 3. **Internal Models**: Core business logic (not exposed in API)  ## üîê Security & Authentication  SendX uses API key authentication:  ### Team API Key ```http X-Team-ApiKey: YOUR_TEAM_API_KEY ``` - **Required for all requests** - Team-level access to resources - Available in SendX Settings ‚Üí Team API Key  ## üÜî Encrypted ID System  SendX uses encrypted IDs for security and better developer experience:  - **Internal IDs**: Sequential integers (not exposed) - **Encrypted IDs**: 22-character alphanumeric strings - **Prefixed IDs**: Resource-type prefixes in API responses (`contact_<22-char-id>`)  ### ID Format  **All resource IDs follow this pattern:** ``` <resource_prefix>_<22_character_alphanumeric_string> ```  **Example:** ```json {   \"id\": \"contact_BnKjkbBBS500CoBCP0oChQ\",   \"lists\": [\"list_OcuxJHdiAvujmwQVJfd3ss\", \"list_0tOFLp5RgV7s3LNiHrjGYs\"],   \"tags\": [\"tag_UhsDkjL772Qbj5lWtT62VK\", \"tag_fL7t9lsnZ9swvx2HrtQ9wM\"] } ```  ## üìö Resource Prefixes  | Resource | Prefix | Example | |----------|--------|---------| | Contact | `contact_` | `contact_BnKjkbBBS500CoBCP0oChQ` | | Campaign | `campaign_` | `campaign_LUE9BTxmksSmqHWbh96zsn` | | List | `list_` | `list_OcuxJHdiAvujmwQVJfd3ss` | | Tag | `tag_` | `tag_UhsDkjL772Qbj5lWtT62VK` | | Sender | `sender_` | `sender_4vK3WFhMgvOwUNyaL4QxCD` | | Template | `template_` | `template_f3lJvTEhSjKGVb5Lwc5SWS` | | Custom Field | `field_` | `field_MnuqBAG2NPLm7PZMWbjQxt` | | Webhook | `webhook_` | `webhook_9l154iiXlZoPo7vngmamee` | | Post | `post_` | `post_XyZ123aBc456DeF789GhI` | | Post Category | `post_category_` | `post_category_YzS1wOU20yw87UUHKxMzwn` | | Post Tag | `post_tag_` | `post_tag_123XyZ456AbC` | | Member | `member_` | `member_JkL012MnO345PqR678` |  ## üéØ Best Practices  ### Error Handling - **Always check status codes**: 2xx = success, 4xx = client error, 5xx = server error - **Read error messages**: Descriptive messages help debug issues - **Handle rate limits**: Respect API rate limits for optimal performance  ### Data Validation - **Email format**: Must be valid email addresses - **Required fields**: Check documentation for mandatory fields - **Field lengths**: Respect maximum length constraints  ### Performance - **Pagination**: Use offset/limit for large datasets - **Batch operations**: Process multiple items when supported - **Caching**: Cache responses when appropriate  ## üõ†Ô∏è SDKs & Integration  Official SDKs available for: - [Golang](https://github.com/sendx/sendx-go-sdk) - [Python](https://github.com/sendx/sendx-python-sdk) - [Ruby](https://github.com/sendx/sendx-ruby-sdk) - [Java](https://github.com/sendx/sendx-java-sdk) - [PHP](https://github.com/sendx/sendx-php-sdk) - [JavaScript](https://github.com/sendx/sendx-javascript-sdk)  ## üìû Support  Need help? Contact us: - üí¨ **Website Chat**: Available on sendx.io - üìß **Email**: hello@sendx.io - üìö **Documentation**: Full guides at help.sendx.io  ---  **API Endpoint:** `https://api.sendx.io/api/v1/rest`  [<img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\">](https://god.gw.postman.com/run-collection/33476323-44b198b0-5219-4619-a01f-cfc24d573885?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D33476323-44b198b0-5219-4619-a01f-cfc24d573885%26entityType%3Dcollection%26workspaceId%3D6b1e4f65-96a9-4136-9512-6266c852517e)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace sendx\model;

use \ArrayAccess;
use \sendx\ObjectSerializer;

/**
 * RestRCampaign Class Doc Comment
 *
 * @category Class
 * @package  sendx
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestRCampaign implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RestRCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'subject' => 'string',
        'preheader' => 'string',
        'sender' => 'string',
        'html_content' => 'string',
        'text_content' => 'string',
        'schedule_time' => '\DateTime',
        'schedule_type' => 'int',
        'schedule_condition' => 'string',
        'time_condition' => 'string',
        'timezone' => 'string',
        'smart_send' => 'bool',
        'send_in_contacts_timezone' => 'bool',
        'preferred_time_condition' => 'string',
        'preferred_timezone' => 'string',
        'strategy' => 'string',
        'included_segments' => 'string[]',
        'included_lists' => 'string[]',
        'included_tags' => 'string[]',
        'excluded_segments' => 'string[]',
        'excluded_lists' => 'string[]',
        'excluded_tags' => 'string[]',
        'created' => '\DateTime',
        'updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'subject' => null,
        'preheader' => null,
        'sender' => null,
        'html_content' => null,
        'text_content' => null,
        'schedule_time' => 'date-time',
        'schedule_type' => null,
        'schedule_condition' => null,
        'time_condition' => null,
        'timezone' => null,
        'smart_send' => null,
        'send_in_contacts_timezone' => null,
        'preferred_time_condition' => null,
        'preferred_timezone' => null,
        'strategy' => null,
        'included_segments' => null,
        'included_lists' => null,
        'included_tags' => null,
        'excluded_segments' => null,
        'excluded_lists' => null,
        'excluded_tags' => null,
        'created' => 'date-time',
        'updated' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'subject' => false,
        'preheader' => false,
        'sender' => false,
        'html_content' => false,
        'text_content' => false,
        'schedule_time' => false,
        'schedule_type' => false,
        'schedule_condition' => false,
        'time_condition' => false,
        'timezone' => false,
        'smart_send' => false,
        'send_in_contacts_timezone' => false,
        'preferred_time_condition' => false,
        'preferred_timezone' => false,
        'strategy' => false,
        'included_segments' => false,
        'included_lists' => false,
        'included_tags' => false,
        'excluded_segments' => false,
        'excluded_lists' => false,
        'excluded_tags' => false,
        'created' => false,
        'updated' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'subject' => 'subject',
        'preheader' => 'preheader',
        'sender' => 'sender',
        'html_content' => 'htmlContent',
        'text_content' => 'textContent',
        'schedule_time' => 'scheduleTime',
        'schedule_type' => 'scheduleType',
        'schedule_condition' => 'scheduleCondition',
        'time_condition' => 'timeCondition',
        'timezone' => 'timezone',
        'smart_send' => 'smartSend',
        'send_in_contacts_timezone' => 'sendInContactsTimezone',
        'preferred_time_condition' => 'preferredTimeCondition',
        'preferred_timezone' => 'preferredTimezone',
        'strategy' => 'strategy',
        'included_segments' => 'includedSegments',
        'included_lists' => 'includedLists',
        'included_tags' => 'includedTags',
        'excluded_segments' => 'excludedSegments',
        'excluded_lists' => 'excludedLists',
        'excluded_tags' => 'excludedTags',
        'created' => 'created',
        'updated' => 'updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'subject' => 'setSubject',
        'preheader' => 'setPreheader',
        'sender' => 'setSender',
        'html_content' => 'setHtmlContent',
        'text_content' => 'setTextContent',
        'schedule_time' => 'setScheduleTime',
        'schedule_type' => 'setScheduleType',
        'schedule_condition' => 'setScheduleCondition',
        'time_condition' => 'setTimeCondition',
        'timezone' => 'setTimezone',
        'smart_send' => 'setSmartSend',
        'send_in_contacts_timezone' => 'setSendInContactsTimezone',
        'preferred_time_condition' => 'setPreferredTimeCondition',
        'preferred_timezone' => 'setPreferredTimezone',
        'strategy' => 'setStrategy',
        'included_segments' => 'setIncludedSegments',
        'included_lists' => 'setIncludedLists',
        'included_tags' => 'setIncludedTags',
        'excluded_segments' => 'setExcludedSegments',
        'excluded_lists' => 'setExcludedLists',
        'excluded_tags' => 'setExcludedTags',
        'created' => 'setCreated',
        'updated' => 'setUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'subject' => 'getSubject',
        'preheader' => 'getPreheader',
        'sender' => 'getSender',
        'html_content' => 'getHtmlContent',
        'text_content' => 'getTextContent',
        'schedule_time' => 'getScheduleTime',
        'schedule_type' => 'getScheduleType',
        'schedule_condition' => 'getScheduleCondition',
        'time_condition' => 'getTimeCondition',
        'timezone' => 'getTimezone',
        'smart_send' => 'getSmartSend',
        'send_in_contacts_timezone' => 'getSendInContactsTimezone',
        'preferred_time_condition' => 'getPreferredTimeCondition',
        'preferred_timezone' => 'getPreferredTimezone',
        'strategy' => 'getStrategy',
        'included_segments' => 'getIncludedSegments',
        'included_lists' => 'getIncludedLists',
        'included_tags' => 'getIncludedTags',
        'excluded_segments' => 'getExcludedSegments',
        'excluded_lists' => 'getExcludedLists',
        'excluded_tags' => 'getExcludedTags',
        'created' => 'getCreated',
        'updated' => 'getUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('preheader', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('html_content', $data ?? [], null);
        $this->setIfExists('text_content', $data ?? [], null);
        $this->setIfExists('schedule_time', $data ?? [], null);
        $this->setIfExists('schedule_type', $data ?? [], 0);
        $this->setIfExists('schedule_condition', $data ?? [], null);
        $this->setIfExists('time_condition', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('smart_send', $data ?? [], null);
        $this->setIfExists('send_in_contacts_timezone', $data ?? [], null);
        $this->setIfExists('preferred_time_condition', $data ?? [], null);
        $this->setIfExists('preferred_timezone', $data ?? [], null);
        $this->setIfExists('strategy', $data ?? [], null);
        $this->setIfExists('included_segments', $data ?? [], null);
        $this->setIfExists('included_lists', $data ?? [], null);
        $this->setIfExists('included_tags', $data ?? [], null);
        $this->setIfExists('excluded_segments', $data ?? [], null);
        $this->setIfExists('excluded_lists', $data ?? [], null);
        $this->setIfExists('excluded_tags', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['schedule_time'] === null) {
            $invalidProperties[] = "'schedule_time' can't be null";
        }
        if ($this->container['schedule_type'] === null) {
            $invalidProperties[] = "'schedule_type' can't be null";
        }
        if ($this->container['schedule_condition'] === null) {
            $invalidProperties[] = "'schedule_condition' can't be null";
        }
        if ($this->container['included_lists'] === null) {
            $invalidProperties[] = "'included_lists' can't be null";
        }
        if ($this->container['excluded_lists'] === null) {
            $invalidProperties[] = "'excluded_lists' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Encrypted ID of the campaign
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Internal campaign name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Email subject line
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets preheader
     *
     * @return string|null
     */
    public function getPreheader()
    {
        return $this->container['preheader'];
    }

    /**
     * Sets preheader
     *
     * @param string|null $preheader Email preview text
     *
     * @return self
     */
    public function setPreheader($preheader)
    {
        if (is_null($preheader)) {
            throw new \InvalidArgumentException('non-nullable preheader cannot be null');
        }
        $this->container['preheader'] = $preheader;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender Sender id
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets html_content
     *
     * @return string|null
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     *
     * @param string|null $html_content HTML email content
     *
     * @return self
     */
    public function setHtmlContent($html_content)
    {
        if (is_null($html_content)) {
            throw new \InvalidArgumentException('non-nullable html_content cannot be null');
        }
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets text_content
     *
     * @return string|null
     */
    public function getTextContent()
    {
        return $this->container['text_content'];
    }

    /**
     * Sets text_content
     *
     * @param string|null $text_content Plain text email content
     *
     * @return self
     */
    public function setTextContent($text_content)
    {
        if (is_null($text_content)) {
            throw new \InvalidArgumentException('non-nullable text_content cannot be null');
        }
        $this->container['text_content'] = $text_content;

        return $this;
    }

    /**
     * Gets schedule_time
     *
     * @return \DateTime
     */
    public function getScheduleTime()
    {
        return $this->container['schedule_time'];
    }

    /**
     * Sets schedule_time
     *
     * @param \DateTime $schedule_time When to send (if scheduled)
     *
     * @return self
     */
    public function setScheduleTime($schedule_time)
    {
        if (is_null($schedule_time)) {
            throw new \InvalidArgumentException('non-nullable schedule_time cannot be null');
        }
        $this->container['schedule_time'] = $schedule_time;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return int
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param int $schedule_type Campaign scheduling type.  **Values:** - `0` - Schedule later - `1` - Send Now
     *
     * @return self
     */
    public function setScheduleType($schedule_type)
    {
        if (is_null($schedule_type)) {
            throw new \InvalidArgumentException('non-nullable schedule_type cannot be null');
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets schedule_condition
     *
     * @return string
     */
    public function getScheduleCondition()
    {
        return $this->container['schedule_condition'];
    }

    /**
     * Sets schedule_condition
     *
     * @param string $schedule_condition datetime for scheduled campaigns (required if scheduleType=1)
     *
     * @return self
     */
    public function setScheduleCondition($schedule_condition)
    {
        if (is_null($schedule_condition)) {
            throw new \InvalidArgumentException('non-nullable schedule_condition cannot be null');
        }
        $this->container['schedule_condition'] = $schedule_condition;

        return $this;
    }

    /**
     * Gets time_condition
     *
     * @return string|null
     */
    public function getTimeCondition()
    {
        return $this->container['time_condition'];
    }

    /**
     * Sets time_condition
     *
     * @param string|null $time_condition Time-related condition for the campaign
     *
     * @return self
     */
    public function setTimeCondition($time_condition)
    {
        if (is_null($time_condition)) {
            throw new \InvalidArgumentException('non-nullable time_condition cannot be null');
        }
        $this->container['time_condition'] = $time_condition;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Campaign timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets smart_send
     *
     * @return bool|null
     */
    public function getSmartSend()
    {
        return $this->container['smart_send'];
    }

    /**
     * Sets smart_send
     *
     * @param bool|null $smart_send Timezone for the scheduled send
     *
     * @return self
     */
    public function setSmartSend($smart_send)
    {
        if (is_null($smart_send)) {
            throw new \InvalidArgumentException('non-nullable smart_send cannot be null');
        }
        $this->container['smart_send'] = $smart_send;

        return $this;
    }

    /**
     * Gets send_in_contacts_timezone
     *
     * @return bool|null
     */
    public function getSendInContactsTimezone()
    {
        return $this->container['send_in_contacts_timezone'];
    }

    /**
     * Sets send_in_contacts_timezone
     *
     * @param bool|null $send_in_contacts_timezone Send at specified time in each contact's timezone
     *
     * @return self
     */
    public function setSendInContactsTimezone($send_in_contacts_timezone)
    {
        if (is_null($send_in_contacts_timezone)) {
            throw new \InvalidArgumentException('non-nullable send_in_contacts_timezone cannot be null');
        }
        $this->container['send_in_contacts_timezone'] = $send_in_contacts_timezone;

        return $this;
    }

    /**
     * Gets preferred_time_condition
     *
     * @return string|null
     */
    public function getPreferredTimeCondition()
    {
        return $this->container['preferred_time_condition'];
    }

    /**
     * Sets preferred_time_condition
     *
     * @param string|null $preferred_time_condition Preferred time condition, in case of smartSend and sendInContactTimeZone
     *
     * @return self
     */
    public function setPreferredTimeCondition($preferred_time_condition)
    {
        if (is_null($preferred_time_condition)) {
            throw new \InvalidArgumentException('non-nullable preferred_time_condition cannot be null');
        }
        $this->container['preferred_time_condition'] = $preferred_time_condition;

        return $this;
    }

    /**
     * Gets preferred_timezone
     *
     * @return string|null
     */
    public function getPreferredTimezone()
    {
        return $this->container['preferred_timezone'];
    }

    /**
     * Sets preferred_timezone
     *
     * @param string|null $preferred_timezone Preferred timezone for smart send optimization
     *
     * @return self
     */
    public function setPreferredTimezone($preferred_timezone)
    {
        if (is_null($preferred_timezone)) {
            throw new \InvalidArgumentException('non-nullable preferred_timezone cannot be null');
        }
        $this->container['preferred_timezone'] = $preferred_timezone;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string|null
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string|null $strategy Campaign delivery strategy
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets included_segments
     *
     * @return string[]|null
     */
    public function getIncludedSegments()
    {
        return $this->container['included_segments'];
    }

    /**
     * Sets included_segments
     *
     * @param string[]|null $included_segments Included segment IDs
     *
     * @return self
     */
    public function setIncludedSegments($included_segments)
    {
        if (is_null($included_segments)) {
            throw new \InvalidArgumentException('non-nullable included_segments cannot be null');
        }
        $this->container['included_segments'] = $included_segments;

        return $this;
    }

    /**
     * Gets included_lists
     *
     * @return string[]
     */
    public function getIncludedLists()
    {
        return $this->container['included_lists'];
    }

    /**
     * Sets included_lists
     *
     * @param string[] $included_lists Included list IDs with prefix
     *
     * @return self
     */
    public function setIncludedLists($included_lists)
    {
        if (is_null($included_lists)) {
            throw new \InvalidArgumentException('non-nullable included_lists cannot be null');
        }
        $this->container['included_lists'] = $included_lists;

        return $this;
    }

    /**
     * Gets included_tags
     *
     * @return string[]|null
     */
    public function getIncludedTags()
    {
        return $this->container['included_tags'];
    }

    /**
     * Sets included_tags
     *
     * @param string[]|null $included_tags Included tag IDs with prefix
     *
     * @return self
     */
    public function setIncludedTags($included_tags)
    {
        if (is_null($included_tags)) {
            throw new \InvalidArgumentException('non-nullable included_tags cannot be null');
        }
        $this->container['included_tags'] = $included_tags;

        return $this;
    }

    /**
     * Gets excluded_segments
     *
     * @return string[]|null
     */
    public function getExcludedSegments()
    {
        return $this->container['excluded_segments'];
    }

    /**
     * Sets excluded_segments
     *
     * @param string[]|null $excluded_segments Excluded segment IDs
     *
     * @return self
     */
    public function setExcludedSegments($excluded_segments)
    {
        if (is_null($excluded_segments)) {
            throw new \InvalidArgumentException('non-nullable excluded_segments cannot be null');
        }
        $this->container['excluded_segments'] = $excluded_segments;

        return $this;
    }

    /**
     * Gets excluded_lists
     *
     * @return string[]
     */
    public function getExcludedLists()
    {
        return $this->container['excluded_lists'];
    }

    /**
     * Sets excluded_lists
     *
     * @param string[] $excluded_lists Excluded list IDs with prefix
     *
     * @return self
     */
    public function setExcludedLists($excluded_lists)
    {
        if (is_null($excluded_lists)) {
            throw new \InvalidArgumentException('non-nullable excluded_lists cannot be null');
        }
        $this->container['excluded_lists'] = $excluded_lists;

        return $this;
    }

    /**
     * Gets excluded_tags
     *
     * @return string[]|null
     */
    public function getExcludedTags()
    {
        return $this->container['excluded_tags'];
    }

    /**
     * Sets excluded_tags
     *
     * @param string[]|null $excluded_tags Excluded tag IDs with prefix
     *
     * @return self
     */
    public function setExcludedTags($excluded_tags)
    {
        if (is_null($excluded_tags)) {
            throw new \InvalidArgumentException('non-nullable excluded_tags cannot be null');
        }
        $this->container['excluded_tags'] = $excluded_tags;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated updated
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


